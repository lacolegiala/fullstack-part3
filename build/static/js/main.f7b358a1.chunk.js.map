{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","getAll","a","request","axios","get","response","data","create","newObject","post","remove","id","delete","update","personObject","put","Contacts","props","persons","map","person","key","name","number","onClick","deletePerson","Filter","value","filteringString","onChange","handleFilter","ContactForm","onSubmit","addContact","newName","handleNameChange","newNumber","handleNumberChange","type","Notification","className","text","App","useState","setPersons","setNewName","setNewNumber","setText","query","setQuery","flashNotification","setTimeout","useEffect","personService","then","initialPersons","contactsToShow","filter","toLowerCase","includes","length","event","target","preventDefault","contact","find","changedContact","window","confirm","catch","error","console","log","alert","returnedPerson","concat","toDelete","p","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSACMA,EAAU,oCA2BD,GACbC,OA1BU,uCAAG,8BAAAC,EAAA,6DACPC,EAAUC,IAAMC,IAAIL,GADb,SAEUG,EAFV,cAEPG,EAFO,yBAGNA,EAASC,MAHH,2CAAH,qDA2BVC,OArBU,uCAAG,WAAOC,GAAP,iBAAAP,EAAA,6DACPC,EAAUC,IAAMM,KAAKV,EAASS,GADvB,SAEUN,EAFV,cAEPG,EAFO,yBAGNA,EAASC,MAHH,2CAAH,sDAsBVI,OAhBU,uCAAG,WAAOC,GAAP,iBAAAV,EAAA,6DACPC,EAAUC,IAAMS,OAAN,UAAgBb,EAAhB,YAA2BY,IAD9B,SAEUT,EAFV,cAEPG,EAFO,yBAGNA,EAASC,MAHH,2CAAH,sDAiBVO,OAXU,uCAAG,WAAOF,EAAIG,GAAX,iBAAAb,EAAA,6DACPC,EAAUC,IAAMY,IAAN,UAAahB,EAAb,YAAwBY,GAAMG,GADjC,SAEUZ,EAFV,cAEPG,EAFO,yBAGNA,EAASC,MAHH,2CAAH,yDCjBNU,EAAW,SAACC,GAChB,OACE,4BACGA,EAAMC,QAAQC,KAAI,SAAAC,GAAM,OACvB,yBAAKC,IAAKD,EAAOE,MACdF,EAAOE,KADV,IACiBF,EAAOG,OACtB,4BAAQC,QAAS,kBAAMP,EAAMQ,aAAaL,EAAOT,MAAjD,gBAOJe,EAAS,SAACT,GACd,OACE,iDAEE,2BACEU,MAAOV,EAAMW,gBACbC,SAAUZ,EAAMa,iBAMlBC,EAAc,SAACd,GACnB,OACE,0BAAMe,SAAUf,EAAMgB,YACpB,qCAEE,2BACEN,MAAOV,EAAMiB,QACbL,SAAUZ,EAAMkB,oBAGpB,uCAEE,2BACER,MAAOV,EAAMmB,UACbP,SAAUZ,EAAMoB,sBAGpB,6BACE,4BAAQC,KAAK,UAAb,UAMFC,EAAe,SAACtB,GACpB,OACE,yBAAKuB,UAAU,gBACZvB,EAAMwB,OA2HEC,EArHH,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACRzB,EADQ,KACC0B,EADD,OAEgBD,mBAAS,IAFzB,mBAERT,EAFQ,KAECW,EAFD,OAGoBF,mBAAS,IAH7B,mBAGRP,EAHQ,KAGGU,EAHH,OAIUH,mBAAS,IAJnB,mBAIRF,EAJQ,KAIFM,EAJE,OAKYJ,mBAAS,IALrB,mBAKRK,EALQ,KAKDC,EALC,KAOVC,EAAoB,SAACT,GACzBM,EAAQN,GACRU,WAAWJ,EAAS,IAAM,KAG5BK,qBAAU,WACRC,EACGrD,SACEsD,MAAK,SAAAC,GACJX,EAAWW,QAEhB,IAIH,IAmEMC,EAA2B,KAAVR,EACnB9B,EACAA,EAAQuC,QAAO,SAAArC,GAAM,OACrBA,EAAOE,KAAKoC,cAAcC,SAASX,MAKvC,OACE,6BACE,yCACCP,EAAKmB,OAAS,GACb,kBAAC,EAAD,CAAcnB,KAAMA,IAEtB,kBAAC,EAAD,CAAQb,gBAAiBoB,EAAOlB,aAzCf,SAAC+B,GACpBZ,EAASY,EAAMC,OAAOnC,UAyCpB,kBAAC,EAAD,CACEQ,iBAvCmB,SAAC0B,GACxBhB,EAAWgB,EAAMC,OAAOnC,QAuCpBU,mBApCqB,SAACwB,GAC1Bf,EAAae,EAAMC,OAAOnC,QAoCtBS,UAAWA,EACXF,QAASA,EACTD,WAvFa,SAAC4B,GAElBA,EAAME,iBACN,IAAMjD,EAAe,CACnBQ,KAAMY,EACNX,OAAQa,GAKV,GAFoBlB,EAAQC,KAAI,SAAAC,GAAM,OAAIA,EAAOE,QAEhCqC,SAAS7C,EAAaQ,MAQlC,CACH,IAAM0C,EAAU9C,EAAQ+C,MAAK,SAAA7C,GAAM,OAAIA,EAAOE,OAASY,KACjDgC,EAAc,eAAOF,EAAP,CAAgBzC,OAAQa,IACjC+B,OAAOC,QAAP,UAAkBlC,EAAlB,8EAETmB,EAAcxC,OAAOmD,EAAQrD,GAAIuD,GAChCZ,MAAK,SAAAjD,GACJuC,EAAW1B,EAAQC,KAAI,SAAAC,GAAM,OAAIA,EAAOT,KAAOqD,EAAQrD,GAAKS,EAASf,SAEtEgE,OAAM,SAAAC,GACLC,QAAQC,IAAI,OAAQF,GACpBG,MAAM,iDAlBVpB,EACG9C,OAAOO,GACPwC,MAAK,SAAAoB,GACJ9B,EAAW1B,EAAQyD,OAAOD,IAC1BxB,EAAkB,SAAD,OAAUhB,EAAV,yBAkBvBW,EAAW,IACXC,EAAa,OAuDX,uCACA,kBAAC,EAAD,CAAU5B,QAASsC,EAAgB/B,aArClB,SAACd,GACpB,IAAMiE,EAAW1D,EAAQ+C,MAAK,SAAAY,GAAC,OAAIA,EAAElE,KAAOA,KACjCwD,OAAOC,QAAP,iBAAyBQ,EAAStD,QAE3C+B,EAAc3C,OAAOC,GAClB2C,MAAK,SAAAjD,GACJuC,EAAW1B,EAAQuC,QAAO,SAAAoB,GAAC,OAAIA,EAAElE,KAAOA,MACxCuC,EAAkB,WAAD,OAAY0B,EAAStD,UACrC+C,OAAM,WACPzB,EAAW1B,EAAQuC,QAAO,SAAAoB,GAAC,OAAIA,EAAElE,KAAOA,cCtI9BmE,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.f7b358a1.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = async () => {\n  const request = axios.get(baseUrl)\n  const response = await request\n  return response.data\n}\n\nconst create = async (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  const response = await request\n  return response.data\n}\n\nconst remove = async (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  const response = await request\n  return response.data\n}\n\nconst update = async (id, personObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, personObject)\n  const response = await request\n  return response.data\n}\n\n\nexport default { \n  getAll,\n  create,\n  remove,\n  update\n}","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport personService from './services/persons'\n\nconst Contacts = (props) => {\n  return (\n    <ul>\n      {props.persons.map(person =>\n        <div key={person.name}>\n          {person.name} {person.number}\n          <button onClick={() => props.deletePerson(person.id)}>delete</button>\n        </div>\n      )}\n    </ul>\n  )\n}\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter shown with\n      <input\n        value={props.filteringString}\n        onChange={props.handleFilter}\n      />\n    </div>\n  )\n}\n\nconst ContactForm = (props) => {\n  return (\n    <form onSubmit={props.addContact}>\n      <div>\n        name:\n        <input\n          value={props.newName}\n          onChange={props.handleNameChange}\n        />\n      </div>\n      <div>\n        number: \n        <input\n          value={props.newNumber}\n          onChange={props.handleNumberChange}\n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Notification = (props) => {\n  return (\n    <div className=\"notification\">\n      {props.text}\n    </div>\n  )\n}\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ text, setText ] = useState('')\n  const [ query, setQuery ] = useState('')\n\n  const flashNotification = (text) => {\n    setText(text)\n    setTimeout(setText, 3000, '')\n  }\n  \n  useEffect(() => {\n    personService\n      .getAll()\n        .then(initialPersons => {\n          setPersons(initialPersons)\n        })\n  }, [])\n\n  \n  \n  const addContact = (event) => {\n    // defaulttina selaimet lataavat koko sivun uudelleen, preventDefaultilla estetään se\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    \n    const personNames = persons.map(person => person.name)\n\n    if (!personNames.includes(personObject.name)) {\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          flashNotification(`Added ${newName} to the phonebook`)\n        })\n    }\n    else {\n      const contact = persons.find(person => person.name === newName)\n      const changedContact = {...contact, number: newNumber}\n      const ok = window.confirm(`${newName} is already added to the phonebook. Replace the old number with new one?`)\n      if (ok) {\n        personService.update(contact.id, changedContact)\n        .then(response => {\n          setPersons(persons.map(person => person.id !== contact.id ? person : response))\n        })\n        .catch(error => {\n          console.log('fail', error)\n          alert('Something went wrong, try again later')\n        })\n      }\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n    \n\n\n  const handleFilter = (event) => {\n    setQuery(event.target.value)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n\n  const deletePerson = (id) => {\n    const toDelete = persons.find(p => p.id === id)\n    const ok = window.confirm(`Delete ${toDelete.name}`)\n    if (ok) {\n      personService.remove(id)\n        .then(response => {\n          setPersons(persons.filter(p => p.id !== id))\n          flashNotification(`Deleted ${toDelete.name}`)\n        }).catch(() => {\n          setPersons(persons.filter(p => p.id !== id))\n        })\n    }\n  }\n\n  const contactsToShow = query === ''\n    ? persons\n    : persons.filter(person =>\n      person.name.toLowerCase().includes(query)\n    )\n\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {text.length > 0 &&\n        <Notification text={text}/>\n      }\n      <Filter filteringString={query} handleFilter={handleFilter}></Filter>\n      <ContactForm \n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newNumber={newNumber}\n        newName={newName}\n        addContact={addContact}\n      />\n      <h2>Numbers</h2>\n      <Contacts persons={contactsToShow} deletePerson={deletePerson}/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister();\n"],"sourceRoot":""}