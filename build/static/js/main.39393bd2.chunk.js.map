{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["getAll","a","request","axios","get","response","data","create","newObject","post","remove","id","delete","Contacts","persons","deletePerson","map","person","key","name","number","onClick","ContactForm","props","onSubmit","addContact","value","newName","onChange","handleNameChange","type","Notification","className","text","App","useState","setPersons","setNewName","setText","flashNotification","setTimeout","useEffect","personService","then","initialPersons","newArray","length","event","target","preventDefault","personObject","includes","window","alert","returnedPerson","concat","toDelete","find","p","confirm","filter","catch","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39393bd2.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = async () => {\n  const request = axios.get(baseUrl)\n  const response = await request\n  return response.data\n}\n\nconst create = async newObject => {\n  const request = axios.post(baseUrl, newObject)\n  const response = await request\n  return response.data\n}\n\nconst remove = async (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  const response = await request\n  return response.data\n}\n\nexport default { \n  getAll,\n  create,\n  remove\n}","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport personService from './services/persons'\n\nconst Contacts = ( { persons, deletePerson }) => {\n  return (\n    <ul>\n      {persons.map(person =>\n        <div key={person.name}>\n          {person.name} {person.number}\n          <button onClick={() => deletePerson(person.id)}>delete</button>\n        </div>\n      )}\n    </ul>\n  )\n}\n\nconst ContactForm = (props) => {\n  return (\n    <form onSubmit={props.addContact}>\n      <div>\n        name:\n        <input\n          value={props.newName}\n          onChange={props.handleNameChange}\n        />\n      </div>\n      {/* <div>\n        number: \n        <input\n          value={props.newNumber}\n          onChange={props.handleNumberChange}\n        />\n      </div> */}\n      <div>\n        <button onClick={props.addContact} type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Notification = (props) => {\n  return (\n    <div className=\"notification\">\n      {props.text}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  // const [ newNumber, setNewNumber ] = useState('')\n  const [ text, setText ] = useState('')\n\n  const flashNotification = (text) => {\n    setText(text)\n    setTimeout(setText, 3000, '')\n  }\n  \n  useEffect(() => {\n    personService\n      .getAll()\n        .then(initialPersons => {\n          setPersons(initialPersons)\n        })\n  }, [])\n\n  const newArray = persons.map(person => person.name)\n  \n  const addContact = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      // number: newNumber\n    }\n\n    if (!newArray.includes(personObject.name)) {\n      \n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          // setNewNumber('')\n          flashNotification(`Added ${newName} to the phonebook`)\n        })\n    }\n    else {\n      window.alert(`${newName} is already added to the phonebook`)\n      setNewName('')\n      // setNewNumber('')\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  // const handleNumberChange = (event) => {\n  //   setNewNumber(event.target.value)\n  // }\n\n  const deletePerson = (id) => {\n    const toDelete = persons.find(p => p.id === id)\n    const ok = window.confirm(`Delete ${toDelete.name}`)\n    if (ok) {\n      personService.remove(id)\n        .then(response => {\n          setPersons(persons.filter(p => p.id !== id))\n          flashNotification(`Deleted ${toDelete.name}`)\n        }).catch(() => {\n          setPersons(persons.filter(p => p.id !== id))\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {text.length > 0 &&\n        <Notification text={text}/>\n      }\n      <ContactForm \n        handleNameChange={handleNameChange}\n        // handleNumberChange={handleNumberChange}\n        // newNumber={newNumber}\n        newName={newName}\n        addContact={addContact}\n      />\n      <h2>Numbers</h2>\n      <Contacts persons={persons} deletePerson={deletePerson}/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister();\n"],"sourceRoot":""}